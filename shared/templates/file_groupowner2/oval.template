<def-group>
  <definition class="compliance" id="{{{ _RULE_ID }}}" version="1">
   {{% if FILEPATH is not string %}}
      {{{ oval_metadata("This test makes sure that " + FILEPATH|join(", ") + " is group owned by " + GROUP + ".") }}}
      <criteria>
    {{% for filepath in FILEPATH %}}
      <criterion comment="Check file group ownership of {{{ filepath }}}" test_ref="test_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}" />
    {{% endfor %}}
   {{% else %}}
    {{{ oval_metadata("This test makes sure that " + FILEPATH + " is group owned by " + GROUP + ".") }}}
    <criteria>
      <criterion comment="Check file group ownership of {{{ FILEPATH }}}" test_ref="test_file_groupowner{{{ FILEID }}}" />
   {{% endif %}}
    </criteria>
  </definition>
  
  {{%- set GROUPS=GROUP.split("|") %}}
  {{% for grp in GROUPS %}}
    <ind:textfilecontent54_object id="object_{{{grp}}}_gid" version="1" comment="gid of the {{{grp}}} group">
      <ind:filepath>/etc/group</ind:filepath>
      <ind:pattern operation="pattern match">^{{{grp}}}:\w+:(\w+):.*</ind:pattern>
      <ind:instance datatype="int" operation="equals">1</ind:instance>
    </ind:textfilecontent54_object>
    <local_variable id="var_{{{grp}}}_gid" datatype="int" version="1"
                    comment="Retrieve the gid of {{{grp}}} group">
      <object_component item_field="subexpression" object_ref="object_{{{grp}}}_gid"/>
    </local_variable>
  {{% endfor %}}

  {{% for filepath in FILEPATH %}}
    <unix:file_test check="all" check_existence="any_exist" comment="Testing group ownership of {{{ filepath }}}" id="test_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}" state_operator="OR" version="1">
      <unix:object object_ref="object_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}" />
      {{% for grp in group.split("|") %}}
        <unix:state state_ref="state_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}_{{{ grp }}}"/>
      {{% endfor %}}
    </unix:file_test>

    <unix:file_object comment="{{{ filepath }}}" id="object_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}" version="1">
      {{%- if IS_DIRECTORY -%}}
        {{%- if RECURSIVE %}}
          <unix:behaviors recurse="directories" recurse_direction="down" max_depth="-1" recurse_file_system="local" />
        {{%- endif %}}
        <unix:path>{{{ filepath[:-1] }}}</unix:path>
        {{%- if FILE_REGEX %}}
          <unix:filename operation="pattern match">{{{ FILE_REGEX[loop.index0] }}}</unix:filename>
        {{%- else %}}
          <unix:filename xsi:nil="true" />
        {{%- endif %}}
      {{%- else %}}
        <unix:filepath{{% if FILEPATH_IS_REGEX %}} operation="pattern match"{{% endif %}}>{{{ filepath }}}</unix:filepath>
      {{%- endif %}}
      <filter action="exclude">symlink_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}</filter>
    </unix:file_object>

    {{% for grp in GROUPS %}}
      <unix:file_state id="state_file_groupowner{{{ FILEID }}}_{{{ loop.index0 }}}_{{{ grp }}}" version="1">
        <unix:group_id datatype="int" operation="equals" var_ref="var_{{{grp}}}_gid"></unix:group_id>
      </unix:file_state>
    {{% endfor %}}

    <unix:file_state id="symlink_file_groupowner{{{ FILEID }}}_{{{ loop.index0  }}}" version="1">
      <unix:type operation="equals">symbolic link</unix:type>
    </unix:file_state>
  {{% endfor %}}
</def-group>
